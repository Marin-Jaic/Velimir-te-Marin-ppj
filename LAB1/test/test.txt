KR_STRUCT 1 struct
IDN 1 S
L_VIT_ZAGRADA 1 {
KR_CHAR 2 char
IDN 2 t
TOCKAZAREZ 2 ;
KR_INT 3 int
IDN 3 x
TOCKAZAREZ 3 ;
D_VIT_ZAGRADA 4 }
TOCKAZAREZ 4 ;
KR_VOID 9 void
IDN 9 fun
L_ZAGRADA 9 (
KR_INT 9 int
IDN 9 xYz
D_ZAGRADA 9 )
L_VIT_ZAGRADA 9 {
KR_RETURN 10 return
TOCKAZAREZ 10 ;
D_VIT_ZAGRADA 11 }
KR_INT 14 int
IDN 14 main
L_ZAGRADA 14 (
KR_VOID 14 void
D_ZAGRADA 14 )
L_VIT_ZAGRADA 14 {
KR_INT 15 int
IDN 15 A
L_UGL_ZAGRADA 15 [
BROJ 15 512
D_UGL_ZAGRADA 15 ]
TOCKAZAREZ 15 ;
KR_INT 16 int
IDN 16 t
L_UGL_ZAGRADA 16 [
D_UGL_ZAGRADA 16 ]
OP_PRIDRUZI 16 =
L_VIT_ZAGRADA 16 {
BROJ 16 1
ZAREZ 16 ,
BROJ 16 2
ZAREZ 16 ,
BROJ 16 3
D_VIT_ZAGRADA 16 }
TOCKAZAREZ 16 ;
KR_CHAR 17 char
IDN 17 tmp
L_UGL_ZAGRADA 17 [
D_UGL_ZAGRADA 17 ]
OP_PRIDRUZI 17 =
NIZ_ZNAKOVA 17 "te\nst"
TOCKAZAREZ 17 ;
KR_CONST 18 const
KR_CHAR 18 char
ASTERISK 18 *
IDN 18 x
OP_PRIDRUZI 18 =
NIZ_ZNAKOVA 18 "\"tes\"t2\""
TOCKAZAREZ 18 ;
KR_INT 19 int
IDN 19 xYz
ZAREZ 19 ,
ASTERISK 19 *
IDN 19 abc
TOCKAZAREZ 19 ;
KR_FLOAT 20 float
IDN 20 a_B1
OP_PRIDRUZI 20 =
BROJ 20 10.23
PLUS 20 +
BROJ 20 .12
PLUS 20 +
BROJ 20 1.43e-3
PLUS 20 +
BROJ 20 .43E3
PLUS 20 +
BROJ 20 .46E+134
PLUS 20 +
BROJ 20 0.47E-123
TOCKAZAREZ 20 ;
KR_INT 21 int
IDN 21 i
TOCKAZAREZ 21 ;
KR_STRUCT 22 struct
IDN 22 S
IDN 22 strct
TOCKAZAREZ 22 ;
IDN 23 strct
TOCKA 23 .
IDN 23 t
OP_PRIDRUZI 23 =
ZNAK 23 'b'
TOCKAZAREZ 23 ;
IDN 24 strct
TOCKA 24 .
IDN 24 x
OP_PRIDRUZI 24 =
BROJ 24 4321
TOCKAZAREZ 24 ;
IDN 26 xYz
OP_PRIDRUZI 26 =
BROJ 26 12345
TOCKAZAREZ 26 ;
IDN 27 abc
OP_PRIDRUZI 27 =
AMPERSAND 27 &
IDN 27 xYz
TOCKAZAREZ 27 ;
IDN 28 abc
OP_PRIDRUZI 28 =
L_ZAGRADA 28 (
AMPERSAND 28 &
IDN 28 xYz
D_ZAGRADA 28 )
TOCKAZAREZ 28 ;
ASTERISK 29 *
IDN 29 abc
OP_PRIDRUZI 29 =
ASTERISK 29 *
IDN 29 abc
OP_INC 29 ++
PLUS 29 +
IDN 29 xYz
TOCKAZAREZ 29 ;
ASTERISK 30 *
IDN 30 abc
OP_PRIDRUZI 30 =
BROJ 30 054
OP_MOD 30 %
BROJ 30 5
TOCKAZAREZ 30 ;
ASTERISK 31 *
IDN 31 abc
OP_PRIDRUZI 31 =
BROJ 31 0xaafff
TOCKAZAREZ 31 ;
IDN 32 i
OP_PRIDRUZI 32 =
BROJ 32 3
ASTERISK 32 *
BROJ 32 2
PLUS 32 +
BROJ 32 5
MINUS 32 -
BROJ 32 3
OP_BIN_ILI 32 |
BROJ 32 3
AMPERSAND 32 &
BROJ 32 3
OP_BIN_XILI 32 ^
BROJ 32 3
TOCKAZAREZ 32 ;
IDN 34 tmp
L_UGL_ZAGRADA 34 [
BROJ 34 1
D_UGL_ZAGRADA 34 ]
OP_PRIDRUZI 34 =
ZNAK 34 'b'
TOCKAZAREZ 34 ;
IDN 35 tmp
L_UGL_ZAGRADA 35 [
BROJ 35 2
D_UGL_ZAGRADA 35 ]
OP_PRIDRUZI 35 =
ZNAK 35 '\n'
TOCKAZAREZ 35 ;
IDN 36 tmp
L_UGL_ZAGRADA 36 [
BROJ 36 3
D_UGL_ZAGRADA 36 ]
OP_PRIDRUZI 36 =
ZNAK 36 ''
'
TOCKAZAREZ 36 ;
IDN 37 tmp
L_UGL_ZAGRADA 37 [
BROJ 37 0
D_UGL_ZAGRADA 37 ]
OP_PRIDRUZI 37 =
ZNAK 37 '\''
TOCKAZAREZ 37 ;
KR_FOR 38 for
L_ZAGRADA 38 (
IDN 38 i
OP_PRIDRUZI 38 =
BROJ 38 0
TOCKAZAREZ 38 ;
IDN 38 i
OP_LT 38 <
BROJ 38 4
TOCKAZAREZ 38 ;
OP_INC 38 ++
IDN 38 i
D_ZAGRADA 38 )
L_VIT_ZAGRADA 38 {
IDN 39 tmp
L_UGL_ZAGRADA 39 [
IDN 39 i
D_UGL_ZAGRADA 39 ]
OP_PRIDRUZI 39 =
L_ZAGRADA 39 (
KR_CHAR 39 char
D_ZAGRADA 39 )
ASTERISK 39 *
IDN 39 abc
TOCKAZAREZ 39 ;
KR_BREAK 42 break
TOCKAZAREZ 42 ;
KR_CONTINUE 43 continue
TOCKAZAREZ 43 ;
KR_RETURN 44 return
ASTERISK 44 *
AMPERSAND 44 &
IDN 44 xYz
TOCKAZAREZ 44 ;
D_VIT_ZAGRADA 45 }
KR_IF 47 if
L_ZAGRADA 47 (
BROJ 47 1
OP_GTE 47 >=
BROJ 47 3
OP_I 47 &&
IDN 47 i
OP_GT 47 >
BROJ 47 2
OP_ILI 47 ||
IDN 47 i
OP_LTE 47 <=
BROJ 47 12
D_ZAGRADA 47 )
L_VIT_ZAGRADA 47 {
IDN 48 fun
L_ZAGRADA 48 (
BROJ 48 3
D_ZAGRADA 48 )
TOCKAZAREZ 48 ;
D_VIT_ZAGRADA 49 }
KR_ELSE 49 else
L_VIT_ZAGRADA 49 {
IDN 50 fun
L_ZAGRADA 50 (
BROJ 50 5
D_ZAGRADA 50 )
TOCKAZAREZ 50 ;
D_VIT_ZAGRADA 51 }
KR_WHILE 53 while
L_ZAGRADA 53 (
BROJ 53 1
D_ZAGRADA 53 )
L_VIT_ZAGRADA 53 {
KR_BREAK 54 break
TOCKAZAREZ 54 ;
D_VIT_ZAGRADA 55 }
KR_RETURN 57 return
BROJ 57 0
TOCKAZAREZ 57 ;
D_VIT_ZAGRADA 58 }